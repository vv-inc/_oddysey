it would be as simple as possible.
thinking a minimal language with only
three types - decimal and "signal",
which would be like a string, and nil.

other things, like lists, tables, or
functions, would be defined by wiring
external units together. like a
"data store unit" for lists or tables,
and a "logic unit" which could hold
multiple "operation nodes", which could
be referred to by names and would really
be functions, or just a way of expanding
the limited logic capacity of the main
units.

it could also be interesting for alien
ships to use different connectors, and
an "alien language" inside the ship,
which would be english but with different
alphabet. code within the ship would also
use the foreign language in for instance
the comments of code, but the code itself
would be "in english". however, we could
create a different syntax (for the same
code language) to make the alien ship
feel really alien.

since it's a video game, we can make our
own basic "ide", which could highlight
syntax errors, have a step debugger, and
display the values of named registers
during operation, inline help, and other
things like it.

we can also have a "visualization unit"
that could be used to display images.


some of the things i mean are here
http://worrydream.com/LearnableProgramming/


commas are considered whitespace


breakpoint (at the beginning of a line)
!


"watch" (placed before an expression, would be overlay the value during operation)
@


comment (everything afterward would be ignored)
;

print to console
DBUG

parens would be used to continue between lines
or nest statements


simple math operations

ADD
SUB
MUL
NEG


variable referencing

:NAME IS EXPR
:NAME


comparison

EQ
NQ
LT
GT
AND


null

NIL


conditional (basically a switch)

(COND
  EXPR EXPR
  EXPR (EXPR
        EXPR))


signals (signals are basically string literals delimited by *)

*SIGNAL CONTENTS*

SEND expr expr
SEND *ASTRO 1*, *ERROR*, *OUT OF RANGE*
SEND *CTRL UNIT*, 22, 33, 51
RECV *ANY*, *BIO ALERT*
:FUEL IS RECV *TANK1*, *LEVEL*

loops (either loops or gotos)

(LOOP
  EXPR
  EXPR
  STOP)
  
00 EXPR
10 COND (EQ FUEL 0 (jmp 30))
20 JMP 00
30 SEND *SPKR1* *NO FUEL*



that should be the entire language,
with nearly any combination of those
things possible

and actually, although i won't ever
tell anyone, this below statement is
really a function definition and
reference, but it should be a secret
feature

:ADD2 IS (ADD 2 (RECV 1))
:ADD2 1

it would be as simple as possible.
thinking a minimal language with only
three types - decimal and "signal",
which would be like a string, and nil.

other things, like lists, tables, or
functions, would be defined by wiring
external units together. like a
"data store unit" for lists or tables,
and a "logic unit" which could hold
multiple "operation nodes", which could
be referred to by names and would really
be functions, or just a way of expanding
the limited logic capacity of the main
units.

it could also be interesting for alien
ships to use different connectors, and
an "alien language" inside the ship,
which would be english but with different
alphabet. code within the ship would also
use the foreign language in for instance
the comments of code, but the code itself
would be "in english". however, we could
create a different syntax (for the same
code language) to make the alien ship
feel really alien.

since it's a video game, we can make our
own basic "ide", which could highlight
syntax errors, have a step debugger, and
display the values of named registers
during operation, inline help, and other
things like it.

we can also have a "visualization unit"
that could be used to display images.


the idea wants to be that we make coding
as easy as possible - that means
* a tiny language that wont overwhelm anyone
* avoid complex types and concepts
* interface and debugging that really
  bring out the concepts vs making you
  look for them
  
these two things really demonstrate
the idea
http://worrydream.com/LearnableProgramming/
http://lighttable.com/

the nice thing is that the language
will be so tiny that accomplishing this
wont be difficult


some other articles in the vein of
making things as easy as possible

http://designmodo.com/microcopy/
https://medium.com/life-tips/designing-user-interfaces-for-your-mother-dd45ec50f7b0
http://patternry.com/p=undo/
https://github.com/yuki24/did_you_mean
http://designmodo.com/ux-doors-diagram/




commas are considered whitespace


breakpoint (at the beginning of a line)
!


"watch" (placed before an expression, would be overlay the value during operation)
@


comment (everything afterward would be ignored)
;

print to console
DBUG

parens would be used to continue between lines
or nest statements
ADD 1
ADD 2
(ADD 1) (ADD 2) ; equivalent


simple math operations

ADD
SUB
MUL
NEG
DIV
REM


variable referencing

:NAME IS EXPR
:NAME


comparison

EQ
NQ
LT
GT
AND
OR


null

NIL


conditional (basically a switch)

(COND
  EXPR EXPR
  EXPR (EXPR
        EXPR))


signals (signals are basically string literals delimited by *)

*SIGNAL CONTENTS*

SEND expr expr
SEND *ASTRO 1*, *ERROR*, *OUT OF RANGE*
SEND *CTRL UNIT*, 22, 33, 51
RECV *ANY*, *BIO ALERT*
:FUEL IS RECV *TANK1*, *LEVEL*


loops (either loops or gotos -
i'm using simpler constructs because
they are easier for beginners
despite being less powerful)

(LOOP
  EXPR
  EXPR
  STOP)
  
00 EXPR
10 COND (EQ FUEL 0 (jmp 30))
20 JMP 00
30 SEND *SPKR1* *NO FUEL*



that should be the entire language,
with nearly any combination of those
things possible

and actually, although i won't ever
tell anyone, this below statement is
really a function definition and
reference, but it should be a secret
feature

:ADD2 IS (ADD 2 (RECV 1))  ; non-named args are numbered
:ADD2 1
:SEND2 IS (:SIGNAL :SIGNAL2 ->
           :C IS 0
           (LOOP
            SEND :SIGNAL
            :C IS ADD C 1
            (COND (EQ :C 2 (STOP)))
           ))



depending on the "box" or "computer"
there would be different available
segments, however the displays would
probably have:

3 tabs:
RUN (editor/debugger)
SIMULATE (this would generate automated unit tests based on static analysis of the code)
MANUAL (this would tell you how things work more in-depth)

a "table" of "named registers", which would be the variables
